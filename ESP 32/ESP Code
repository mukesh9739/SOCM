/******************************************Smart Oxygen Control & Monitoring**********************************************************/ 

/*This is a program to aquire the sensor readings from arduino board, location details from Google API and MAC address of the ESP32 pico kit board and send these details to MQTT server via which we display the observed values on the app.
The readings are aquired in BCD format from Arduino and converted back to decimal form before sending to the MQTT Server.*/

/*Header Files*/
#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <HTTPClient.h>
#include <WifiLocation.h>

/***************Constant Global variables used in the program*********************/

const char* ssid = "Enter your SSID here";
const char* pass = "Enter your PASSWORD here";
const char* mqtt_server = "Enter your MQTT server domain name or IP Address";
const char* outTopic ="Enter the topic name to publish messages";
const char* inTopic ="Enter the topic name to get messages";
const char* googleApiKey = "Enter the Google API key here"; 

/*************************************************************************************************/

/*Creating an instance for WiFiClient class*/
WiFiClient espClient;
/*Creating an instance for PubSubClient class*/
PubSubClient client(espClient);
/*Creating an instance for Wifilocation class*/
WifiLocation location (googleApiKey);

/****************Global variables used in the program*********************/

long currentTime, lastTime=0;
int count = 0;
char messages[50];
uint16_t adc_reading;

/***************************This function sets the time***********************************/

void setClock () 
  {
    configTime (0, 0, "pool.ntp.org", "time.nist.gov");

    Serial.print ("Waiting for NTP time sync: ");
    time_t now = time (nullptr);
    while (now < 8 * 3600 * 2) 
    {
        delay (500);
        Serial.print (".");
        now = time (nullptr);
    }
  }

/***************************This function recieves the sensor readings in BCD and returns it's decimal value*******************************/  
int getvalue()
  {
    int b1=0,b2=0,b3=0,b4=0,b5=0,b6=0,b7=0;
    if(digitalRead(2)==HIGH)
      {
        b7=1;
      }
    if(digitalRead(15)==HIGH)
      {
        b6=1;
      }
    if(digitalRead(13)==HIGH)
      {
        b5=1;
      }
    if(digitalRead(14)==HIGH)
      {
        b4=1;
      }
    if(digitalRead(27)==HIGH)
      {
        b3=1;
      }
    if(digitalRead(33)==HIGH)
      {
        b2=1;
      }
    if(digitalRead(32)==HIGH)
      {
        b1=1;
      }
  int a= (b1+(b2*2)+(b3*4)+(b4*8)+(b5*16)+(b6*32)+(b7*64));
  return a;
  }

/*********************This function connects the ESP 32 to WIfi************************/

void setupWifi()
  {
    delay(100);
    Serial.print("\nConnecting to");
    Serial.println(ssid);
  
    WiFi.begin(ssid, pass);
 
    while(WiFi.status() != WL_CONNECTED) 
     {
       delay(100);
       Serial.print("-");
     }
 
    Serial.print("\nConnected to ");
    Serial.println(ssid);
  }

/*********************This function connects the ESP 32 to MQTT Server************************/ 

void reconnect()
  {
    while(!client.connected())
    {
      Serial.print("\nConncting to ");
      Serial.println(mqtt_server);
      if(client.connect("test"))
       {
        Serial.print("\nConnected to ");
        Serial.println(mqtt_server);
        client.subscribe(inTopic);
       }
      else 
      {
        Serial.println("\n Trying to reconnect");
        delay(5000);
      }
    }
  }
 
void setup() 
  {
/************Initialize the exchange of messages with the Serial Monitor at a baud rate of 115200*******************/
    Serial.begin(115200);
/***************Define input pin numbers***************/
    pinMode(32, INPUT);
    pinMode(33, INPUT);
    pinMode(27, INPUT);
    pinMode(14, INPUT);
    pinMode(12, INPUT);
    pinMode(13, INPUT);
    pinMode(15, INPUT);
    WiFi.mode(WIFI_STA);
    setupWifi();
    setClock();
    client.setServer(mqtt_server, 1883);
   } 
    
void loop() 
  {
/****************Connecting to the server*********************/
   if (!client.connected())
    {
      reconnect();
    }
   client.loop();
/**************Get the Sensor readings, every second*******************/
   adc_reading=getvalue();
   delay(1000); 
/**************Get the location coordinates, every second*******************/
  location_t loc;
  loc = location.getGeoFromWiFi();
  /**************Get the MAC Address of the board*******************/
  byte mac[6];
  WiFi.macAddress(mac); 
  /*************************Send the pressure sensor readings, MAC address of the board and location details every second through MQTT cloud to display in the app******************************/    
  currentTime = millis();
  if(currentTime - lastTime > 1000)
    {
      count++;
      snprintf(messages, 50, "%ld ; %s:%s:%s:%s:%s:%s ; %lf,%lf", adc_reading+100,String(mac[0],HEX),String(mac[1],HEX),String(mac[2],HEX),String(mac[3],HEX),String(mac[4],HEX),String(mac[5],HEX),loc.lat,loc.lon); // Location - lat :%lf, lon:%lf ; Accuracy :%lf, lat, lon, accuracy);
      Serial.print("Sending Messages: ");
      Serial.println(messages);
      client.publish(outTopic, messages);
      lastTime = millis();
    }
  }
